import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'dart:io';
import 'package:open_filex/open_filex.dart';

import 'package:path_provider/path_provider.dart';

class KasirPage extends StatefulWidget {
  const KasirPage({super.key});

  @override
  State<KasirPage> createState() => _KasirPageState();
}

class _KasirPageState extends State<KasirPage> with TickerProviderStateMixin {
  late TabController _mainTab;
  late TabController _payTab;

  // data billing contoh
  final List<Map<String, dynamic>> _billing = [
    {
      "unit": "GINJAL-HIPERTENSI",
      "tipe": "Tindakan",
      "tanggal": "2025-08-12",
      "deskripsi": "Pemeriksaan Rawat Jalan â€“ Test Psikologi",
      "caraBayar": "UMUM",
      "nominal": 235000,
    },
    {
      "unit": "RADIOLOGI",
      "tipe": "Radiologi",
      "tanggal": "2025-07-28",
      "deskripsi": "Expertise dokter Spesialis Radiologi",
      "caraBayar": "JAMKESDA",
      "nominal": 20000,
    },
  ];

  // form kuitansi
  String _noKuitansi = "Generated by system";
  String _noRegistrasi = "280725020030004105081";
  String _petugasKasir = "SUV Keuangan";
  DateTime _tglKuitansi = DateTime.now();
  DateTime _tglBayar = DateTime.now();

  // data kuitansi tersimpan
  final List<Map<String, dynamic>> _kuitansiList = [];

  @override
  void initState() {
    super.initState();
    _mainTab = TabController(length: 2, vsync: this);
    _payTab = TabController(length: 5, vsync: this);
  }

  @override
  void dispose() {
    _mainTab.dispose();
    _payTab.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double fontSize = MediaQuery.of(context).size.width < 400 ? 12 : 14;

    return Scaffold(
      appBar: AppBar(
        title: const Text("Kasir"),
        bottom: TabBar(
          controller: _mainTab,
          labelColor: Colors.white, 
          unselectedLabelColor: Colors.white70,
          tabs: const [Tab(text: "Detail Billing"), Tab(text: "Kuitansi")],
          
        ),
      ),
      body: TabBarView(
        controller: _mainTab,
        children: [_buildBilling(fontSize), _buildKuitansiForm(fontSize)],
      ),
    );
  }

  // =================== DETAIL BILLING ===================
  Widget _buildBilling(double fontSize) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ===== Info Registrasi =====
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildInfoRow("No. Registrasi", _noRegistrasi),
                  _buildInfoRow("Waktu Registrasi", "28-07-2025 14:15:21"),
                  _buildInfoRow("Nama Pasien", "M NUR HARUN TEST"),
                  _buildInfoRow("Instalasi", "RAWATINAP"),
                  _buildInfoRow("Unit Layanan", "BEDAH DIGESTIF"),
                  _buildInfoRow("Cara Bayar", "Umum"),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // ===== Tabel Billing =====
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                headingRowColor: MaterialStateProperty.all(
                  Colors.blue.shade100,
                ),
                columnSpacing: 12,
                headingRowHeight: 40,
                dataRowMinHeight: 40,
                dataRowMaxHeight: 60,
                columns: const [
                  DataColumn(label: Text("No")),
                  DataColumn(label: Text("Unit Layanan")),
                  DataColumn(label: Text("Tipe Billing")),
                  DataColumn(label: Text("Tanggal Layanan")),
                  DataColumn(label: Text("Deskripsi")),
                  DataColumn(label: Text("Cara Bayar")),
                  DataColumn(label: Text("No Kuitansi")),
                  DataColumn(label: Text("Nominal")),
                ],
                rows:
                    _billing.asMap().entries.map((entry) {
                      final index = entry.key + 1;
                      final b = entry.value;
                      return DataRow(
                        cells: [
                          DataCell(
                            Text(
                              index.toString(),
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          DataCell(
                            Text(
                              b["unit"],
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          DataCell(
                            Text(
                              b["tipe"],
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          DataCell(
                            Text(
                              b["tanggal"],
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          DataCell(
                            Text(
                              b["deskripsi"],
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          DataCell(
                            Text(
                              b["caraBayar"],
                              style: TextStyle(fontSize: fontSize),
                            ),
                          ),
                          const DataCell(Text("-")),
                          DataCell(
                            Text(
                              "Rp ${NumberFormat('#,###').format(b["nominal"])}",
                              style: TextStyle(
                                fontSize: fontSize,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      );
                    }).toList(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Expanded(
            flex: 3,
            child: Text(
              label,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          const Text(": "),
          Expanded(flex: 5, child: Text(value)),
        ],
      ),
    );
  }

  // =================== KUITANSI ===================
  Widget _buildKuitansiForm(double fontSize) {
    return Column(
      children: [
        TabBar(
          controller: _payTab,
          isScrollable: true,
          labelColor: Colors.blue,
          unselectedLabelColor: Colors.grey,
          tabs: const [
            Tab(text: "UMUM"),
            Tab(text: "BPJS"),
            Tab(text: "JAMKESDA"),
            Tab(text: "PEMDA LAMPUNG"),
            Tab(text: "PT. AJ CENTRAL ASIA RAYA"),
          ],
        ),
        Expanded(
          child: TabBarView(
            controller: _payTab,
            children: [
              _buildFormContent("UMUM"),
              _buildFormContent("BPJS"),
              _buildFormContent("JAMKESDA"),
              _buildFormContent("PEMDA LAMPUNG"),
              _buildFormContent("PT. AJ CENTRAL ASIA RAYA"),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildFormContent(String kategori) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Expanded(
            child: ListView(
              children: [
                Text(
                  "Kuitansi ($kategori)",
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),

                _buildFormRow(
                  "No. Kuitansi",
                  Row(
                    children: [
                      Expanded(
                        child: TextField(
                          controller: TextEditingController(text: _noKuitansi),
                          enabled: false,
                        ),
                      ),
                      const SizedBox(width: 8),
                      ElevatedButton(
                        onPressed: () {
                          setState(() {
                            _noKuitansi = DateFormat(
                              "yyyyMMddHHmmss",
                            ).format(DateTime.now());
                          });
                        },
                        child: const Text("Ambil Nomor"),
                      ),
                    ],
                  ),
                ),

                _buildFormRow(
                  "No. Registrasi",
                  TextField(
                    controller: TextEditingController(text: _noRegistrasi),
                    enabled: false,
                  ),
                ),

                _buildFormRow(
                  "Petugas Kasir",
                  TextField(
                    controller: TextEditingController(text: _petugasKasir),
                    enabled: false,
                  ),
                ),

                _buildFormRow(
                  "Tgl. Kuitansi",
                  TextButton(
                    onPressed: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: _tglKuitansi,
                        firstDate: DateTime(2020),
                        lastDate: DateTime(2100),
                      );
                      if (picked != null) setState(() => _tglKuitansi = picked);
                    },
                    child: Text(DateFormat("yyyy-MM-dd").format(_tglKuitansi)),
                  ),
                ),

                _buildFormRow(
                  "Tgl. Bayar",
                  TextButton(
                    onPressed: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: _tglBayar,
                        firstDate: DateTime(2020),
                        lastDate: DateTime(2100),
                      );
                      if (picked != null) setState(() => _tglBayar = picked);
                    },
                    child: Text(DateFormat("yyyy-MM-dd").format(_tglBayar)),
                  ),
                ),
              ],
            ),
          ),

          // Tombol simpan
          ElevatedButton(
            onPressed: () {
              setState(() {
                _kuitansiList.add({
                  "no": _noKuitansi,
                  "registrasi": _noRegistrasi,
                  "pasien": "M NUR HARUN TEST",
                  "kasir": _petugasKasir,
                  "kategori": kategori,
                  "tanggal": _tglKuitansi,
                  "total": _billing.fold<int>(
                    0,
                    (sum, b) => sum + (b["nominal"] as int),
                  ),
                  "billing": _billing.where((b) => b["nominal"] > 0).toList(),
                });
              });

              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text("Kuitansi $kategori disimpan!")),
              );
            },
            child: const Text("Simpan"),
          ),

          const SizedBox(height: 20),
          Expanded(child: _buildKuitansiTable()),
        ],
      ),
    );
  }

  Widget _buildKuitansiTable() {
    if (_kuitansiList.isEmpty) {
      return const Center(child: Text("Belum ada kuitansi"));
    }

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(Colors.blue.shade100),
        columns: const [
          DataColumn(label: Text("No Kuitansi")),
          DataColumn(label: Text("Kategori")),
          DataColumn(label: Text("Tanggal")),
          DataColumn(label: Text("Total")),
          DataColumn(label: Text("Aksi")),
        ],
        rows:
            _kuitansiList.map((data) {
              return DataRow(
                cells: [
                  DataCell(Text(data["no"])),
                  DataCell(Text(data["kategori"])),
                  DataCell(
                    Text(DateFormat("yyyy-MM-dd").format(data["tanggal"])),
                  ),
                  DataCell(
                    Text("Rp ${NumberFormat('#,###').format(data["total"])}"),
                  ),
                  DataCell(
                    Row(
                      children: [
                        IconButton(
                          icon: const Icon(Icons.info, color: Colors.blue),
                          onPressed: () => _showDetail(context,data),
                        ),
                        IconButton(
                          icon: const Icon(
                            Icons.picture_as_pdf,
                            color: Colors.red,
                          ),
                          onPressed: () => _downloadPdf(context, data),
                        ),
                      ],
                    ),
                  ),
                ],
              );
            }).toList(),
      ),
    );
  }

  void _showDetail(BuildContext context, Map<String, dynamic> data) {
  final currency = NumberFormat.currency(locale: "id", symbol: "Rp ", decimalDigits: 0);

  showDialog(
    context: context,
    builder: (_) => AlertDialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      title: Row(
        children: [
          const Icon(Icons.receipt_long, color: Colors.blue),
          const SizedBox(width: 8),
          Text("Detail Kuitansi\n ${data['no']}"),
        ],
      ),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              dense: true,
              contentPadding: EdgeInsets.zero,
              title: const Text("Kategori"),
              subtitle: Text(data['kategori']),
              leading: const Icon(Icons.category, color: Colors.indigo),
            ),
            ListTile(
              dense: true,
              contentPadding: EdgeInsets.zero,
              title: const Text("Tanggal"),
              subtitle: Text(DateFormat("dd MMMM yyyy").format(data['tanggal'])),
              leading: const Icon(Icons.date_range, color: Colors.teal),
            ),
            const Divider(),
            const Text(
              "Billing",
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ...data["billing"].map<Widget>((b) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 4.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(child: Text(b["deskripsi"])),
                    Text(currency.format(b["nominal"])),
                  ],
                ),
              );
            }).toList(),
            const Divider(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  "Total",
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                  currency.format(data["billing"]
                      .fold(0, (sum, b) => sum + (b["nominal"] as int))),
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text("Tutup"),
        ),
      ],
    ),
  );
}
  Future<void> _downloadPdf(
    BuildContext context,
    Map<String, dynamic> data,
  ) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(24),
        build: (pw.Context ctx) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // HEADER
              pw.Center(
                child: pw.Column(
                  children: [
                    pw.Text(
                      "PEMERINTAH PROVINSI LAMPUNG",
                      style: pw.TextStyle(fontSize: 10),
                    ),
                    pw.Text(
                      "RSUD Abdul Moeloek",
                      style: pw.TextStyle(
                        fontSize: 12,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.Text(
                      "TELP 0721-703312",
                      style: const pw.TextStyle(fontSize: 10),
                    ),
                    pw.Text(
                      "BANDAR LAMPUNG",
                      style: const pw.TextStyle(fontSize: 10),
                    ),
                    pw.SizedBox(height: 8),
                    pw.Text(
                      "TANDA BUKTI PEMBAYARAN",
                      style: pw.TextStyle(
                        fontSize: 14,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.Text(
                      "PERGUB NOMOR 6 TAHUN 2019",
                      style: const pw.TextStyle(fontSize: 10),
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 16),

              // INFO KUITANSI
              pw.Text("No. Kuitansi: ${data['no']}"),
              pw.Text("No. Registrasi: ${data['registrasi']}"),
              pw.Text("Nama Pasien: ${data['pasien']}"),
              pw.Text("Petugas Kasir: ${data['kasir']}"),
              pw.Text(
                "Tanggal Bayar: ${DateFormat('dd-MM-yyyy').format(data['tanggal'])}",
              ),
              pw.SizedBox(height: 16),

              // TABEL BILLING
              pw.Table(
                border: pw.TableBorder.all(width: 0.5),
                columnWidths: {
                  0: const pw.FixedColumnWidth(30),
                  1: const pw.FlexColumnWidth(3),
                  2: const pw.FlexColumnWidth(1.5),
                },
                children: [
                  pw.TableRow(
                    decoration: const pw.BoxDecoration(
                      color: PdfColors.grey300,
                    ),
                    children: [
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(4),
                        child: pw.Text(
                          "No",
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(4),
                        child: pw.Text(
                          "Deskripsi",
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                      pw.Padding(
                        padding: const pw.EdgeInsets.all(4),
                        child: pw.Text(
                          "Nominal",
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                        ),
                      ),
                    ],
                  ),
                  ...data["billing"].asMap().entries.map((entry) {
                    final i = entry.key + 1;
                    final b = entry.value;
                    return pw.TableRow(
                      children: [
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(4),
                          child: pw.Text(i.toString()),
                        ),
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(4),
                          child: pw.Text(b["deskripsi"]),
                        ),
                        pw.Padding(
                          padding: const pw.EdgeInsets.all(4),
                          child: pw.Text(
                            "Rp ${NumberFormat('#,###').format(b["nominal"])}",
                            textAlign: pw.TextAlign.right,
                          ),
                        ),
                      ],
                    );
                  }),
                ],
              ),
              pw.SizedBox(height: 12),

              // TOTAL
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.end,
                children: [
                  pw.Text(
                    "Total: Rp ${NumberFormat('#,###').format(data["total"])}",
                    style: pw.TextStyle(
                      fontWeight: pw.FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
              pw.SizedBox(height: 40),

              // TANDA TANGAN
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Column(
                    children: [
                      pw.Text(
                        "Mengetahui",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                      pw.Text(
                        "Bendahara Penerimaan",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                      pw.SizedBox(height: 40),
                      pw.Text(
                        "(....................)",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                    ],
                  ),
                  pw.Column(
                    children: [
                      pw.Text(
                        "Petugas",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                      pw.Text("Kasir", style: const pw.TextStyle(fontSize: 10)),
                      pw.SizedBox(height: 40),
                      pw.Text(
                        "(${data['kasir']})",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                    ],
                  ),
                  pw.Column(
                    children: [
                      pw.Text(
                        "Tanggal diterima",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                      pw.Text(
                        DateFormat("dd-MM-yyyy").format(DateTime.now()),
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                      pw.SizedBox(height: 40),
                      pw.Text(
                        "(Penyetor)",
                        style: const pw.TextStyle(fontSize: 10),
                      ),
                    ],
                  ),
                ],
              ),
            ],
          );
        },
      ),
    );

    // Simpan file ke Documents
    final dir = await getApplicationDocumentsDirectory();
    final file = File("${dir.path}/kuitansi_${data['no']}.pdf");
    await file.writeAsBytes(await pdf.save());

    // Buka file otomatis
    await OpenFilex.open(file.path);

    // Kasih notifikasi
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("PDF berhasil disimpan dan dibuka di ${file.path}"),
      ),
    );
  }

  Widget _buildFormRow(String label, Widget field) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label, style: const TextStyle(fontWeight: FontWeight.w500)),
          const SizedBox(height: 4),
          field,
        ],
      ),
    );
  }
}
